const mongoose = require('mongoose');

// Connect to MongoDB
main()
  .then(() => console.log("Connection successful"))
  .catch(err => console.log("Connection error:", err));

async function main() {
  await mongoose.connect('mongodb://127.0.0.1:27017/test');
}

// Define schema
const usernameSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number
});

// Create model
const User = mongoose.model("User", usernameSchema);

// ----------------------
// CREATE
// ----------------------

// Insert multiple users
User.insertMany([
  { name: "Tony", email: "tony@gmail.com", age: 50 },
  { name: "Peter", email: "peter@gmail.com", age: 30 },
  { name: "Bruce", email: "bruce@gmail.com", age: 47 }
])
.then(res => console.log("Inserted:", res))
.catch(err => console.log("Insert error:", err));

// Create and save one user
const user2 = new User({
  name: "eve",
  email: "eve@gmail.com",
  age: 23
});

user2.save()
  .then(res => console.log("Saved:", res))
  .catch(err => console.log("Save error:", err));

// ----------------------
// READ
// ----------------------

// Find all users
User.find({})
  .then(res => console.log("All users:", res))
  .catch(err => console.log("Find error:", err));

// Find users with age > 45
User.find({ age: { $gt: 45 } })
  .then(res => console.log("Age > 45:", res))
  .catch(err => console.log("Find error:", err));

// Find user by ID
User.findById("68d8c2b400a209a2ebb7f708")
  .then(res => console.log("Found by ID:", res))
  .catch(err => console.log("Find error:", err));

// ----------------------
// UPDATE
// ----------------------

// Update one user by name
User.updateOne({ name: "Bruce" }, { age: 49 })
  .then(res => console.log("Updated one:", res))
  .catch(err => console.log("Update error:", err));

// Update many users with age > 48
User.updateMany({ age: { $gt: 48 } }, { age: 55 })
  .then(res => console.log("Updated many:", res))
  .catch(err => console.log("Update error:", err));

// Find one and update, return updated doc
User.findOneAndUpdate({ name: "Bruce" }, { age: 25 }, { new: true })
  .then(res => console.log("FindOneAndUpdate:", res))
  .catch(err => console.log("Update error:", err));

// Update by ID and return updated doc
User.findByIdAndUpdate("68d8c2b400a209a2ebb7f708", { age: 35 }, { new: true })
  .then(res => console.log("Updated by ID:", res))
  .catch(err => console.log("Update error:", err));

// ----------------------
// DELETE
// ----------------------

// Delete one user by name
User.deleteOne({ name: "Bruce" })
  .then(res => console.log("Deleted one:", res))
  .catch(err => console.log("Delete error:", err));

// Delete many users with age > 45
User.deleteMany({ age: { $gt: 45 } })
  .then(res => console.log("Deleted many:", res))
  .catch(err => console.log("Delete error:", err));

// Find one and delete
User.findOneAndDelete({ name: "eve" })
  .then(res => console.log("FindOneAndDelete:", res))
  .catch(err => console.log("Delete error:", err));

// Delete by ID
User.findByIdAndDelete("68d8c2b400a209a2ebb7f708")
  .then(res => console.log("Deleted by ID:", res))
  .catch(err => console.log("Delete error:", err));

  
//    Here's a concise explanation for each CRUD operation in your Mongoose code:

// ---

// ### ðŸ”¹ **CREATE**
// - **`insertMany([...])`**  
//   Inserts multiple documents into the collection at once. Great for seeding test data.

// - **`new User({...}).save()`**  
//   Creates and saves a single document. Useful for adding one user at a time.

// ---

// ### ðŸ”¹ **READ**
// - **`find({})`**  
//   Retrieves all documents from the collection.

// - **`find({ age: { $gt: 45 } })`**  
//   Finds users whose age is greater than 45.

// - **`findById("...")`**  
//   Fetches a document using its unique `_id`.

// ---

// ### ðŸ”¹ **UPDATE**
// - **`updateOne({ name: "Bruce" }, { age: 49 })`**  
//   Updates the first document matching the condition. Doesnâ€™t return the updated doc.

// - **`updateMany({ age: { $gt: 48 } }, { age: 55 })`**  
//   Updates all documents where age is greater than 48.

// - **`findOneAndUpdate({ name: "Bruce" }, { age: 25 }, { new: true })`**  
//   Finds and updates a document, and returns the updated version.

// - **`findByIdAndUpdate("...", { age: 35 }, { new: true })`**  
//   Updates a document by `_id` and returns the updated result.

// ---

// ### ðŸ”¹ **DELETE**
// - **`deleteOne({ name: "Bruce" })`**  
//   Deletes the first document matching the condition.

// - **`deleteMany({ age: { $gt: 45 } })`**  
//   Deletes all documents where age is greater than 45.

// - **`findOneAndDelete({ name: "eve" })`**  
//   Finds and deletes a document, returning the deleted doc.

// - **`findByIdAndDelete("...")`**  
//   Deletes a document by `_id` and returns the deleted result.

// ---


